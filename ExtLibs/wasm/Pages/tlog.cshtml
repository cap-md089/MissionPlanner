@page "/tlog"
@using System.IO
@using System.Net
@using System.Net.WebSockets
@using System.Threading
@using MissionPlanner
@using MissionPlanner.Comms
@using MissionPlanner.Utilities
@using MissionPlanner.Log
@using System.IO;

@using System.Text;

@using System.Security.Cryptography;
@using Blazor.FileReader;
@using System.IO;
@using Newtonsoft.Json
@using Org.BouncyCastle.Utilities.Encoders
@implements IDisposable
@inject IFileReaderService fileReaderService;
@inject HttpClient Http

<h1>Tlog</h1>

<input type="file" ref="inputTypeFileElement" />
<button onclick="@ReadFile">Read file</button>
<br />

<p>@gpstime @lat @lng @alt @hdg - @percent %</p>


    <div id="map" style="width: 100%; height: 70vh;"></div>


@functions {
    double lat = 0, lng = 0, alt = 0, hdg = 0;
    int currentCount = 0;
    MAVLinkInterface mav;
    DateTime gpstime;
    static bool init = false;
    int percent = 0;

    static tlog instance;

    [JSInvokable]
    public string SayHello() => $"Hello, {currentCount}!";

    private void Log(string message) => Console.WriteLine($"{DateTime.UtcNow.ToString("O")} - {message}");

    protected override void OnInit()
    {
        Log("OnInit");
        base.OnInit();

        instance = this;

        init = false;

        Console.WriteLine("OnInit Done");
    }

    protected override async Task OnInitAsync() => Log("OnInitAsync");

    //protected override void OnAfterRender() => Log("OnAfterRender");

    protected override async Task OnAfterRenderAsync()
    {


        if (init)
            return;

        Log("OnAfterRenderAsync");

        init = true;

        JSRuntime.Current.InvokeAsync<object>("initMap", null);

    }

    protected override void OnParametersSet()
    {
        Log("OnParametersSet");



    }

    protected override async Task OnParametersSetAsync()
    {
        Log("OnParametersSetAsync");


    }


    ElementRef inputTypeFileElement;

    DateTime nextUpdate = DateTime.Now.AddMilliseconds(100);


    public async Task ReadFile()
    {
        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            /*
                // Read into buffer and act (uses less memory)
                using (Stream stream = await file.OpenReadAsync())
                {
                    // Do stuff with stream...
                    //await stream.ReadAsync(buffer, ...);
                    // This following will fail. Only async read is allowed.
                    //stream.Read(buffer, ...)

                }
                */
            var info = await file.ReadFileInfoAsync();

            Console.WriteLine(info.Name);

            if (info.Name.ToLower().EndsWith("tlog"))
            {


                Console.WriteLine("about to read into memory");
                using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
                {
                    Console.WriteLine("canread " + memoryStream.CanRead + " pos " + memoryStream.Position + "<" + memoryStream.Length);

                    mav = new MAVLinkInterface(memoryStream);

                    // just to prevent null exceptions
                    var cf = new CommsFile();
                    mav.BaseStream = cf;

                    mav.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.GLOBAL_POSITION_INT, packetReceived);
                    mav.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.GPS_RAW_INT, packetReceived);
                    mav.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.HEARTBEAT, packetReceived);
                    mav.SubscribeToPacketType(MAVLink.MAVLINK_MSG_ID.PARAM_VALUE, packetReceived);

                    Console.WriteLine(mav.getHeartBeat());

                    long length = memoryStream.Length;
                    while (memoryStream.Position < length)
                    {
                        //Console.WriteLine("open "+cf.IsOpen + " canread "+ cf.BaseStream.CanRead + " btr " + cf.BytesToRead + " pos " + cf.BaseStream.Position +"<"+ length);

                        var packet = await mav.readPacketAsync();

                        percent = (int) ((memoryStream.Position / (double) length) * 100.0);

                        if (DateTime.Now > nextUpdate)
                        {
                            gpstime = packet.rxtime;

                            StateHasChanged();
                            int a = 0;

                            foreach (var mavd in mav.MAVlist)
                            {
                                mavd.cs.UpdateCurrentSettings(null, false, mav, mavd);
                                JSRuntime.Current.InvokeAsync<object>("setPosition", new object[] {a, mavd.cs.lat, mavd.cs.lng });
                                a++;
                            }

                            try
                            {
                                //JSRuntime.Current.InvokeAsync<object>("test", new object[] {JsonConvert.SerializeObject(mav.MAV.cs)});
                            } catch { }

                            nextUpdate = DateTime.Now.AddMilliseconds(100);

                            await Task.Delay(1);
                        }
                    }
                }
            }
            else
            {
                Console.WriteLine("about to read into memory");
                // Read into memory and act
                using (MemoryStream memoryStream = await file.CreateMemoryStreamAsync(4096))
                {
                    // Sync calls are ok once file is in memory
                    //memoryStream.Read(buffer, ...)

                    Console.WriteLine("CollectionBuffer init");
                    CollectionBuffer collectionBuffer = new CollectionBuffer(memoryStream);

                    Console.WriteLine("CollectionBuffer loop line");
                    foreach (var line in collectionBuffer)
                    {
                        Console.Write(line);
                    }
                }
            }
        }
    }

    private bool packetReceived(MAVLink.MAVLinkMessage packet)
    {
        if (packet.data is MAVLink.mavlink_global_position_int_t)
        {
            var pos = (MAVLink.mavlink_global_position_int_t)packet.data;

            lat = pos.lat / 1e7;
            lng = pos.lon / 1e7;
            alt = pos.alt / 1e3;
            hdg = pos.hdg / 1e2;

            //Console.WriteLine("Update mavlink_global_position_int_t ##############################");
        }
        else if (packet.data is MAVLink.mavlink_gps_raw_int_t)
        {
            var pos = (MAVLink.mavlink_gps_raw_int_t)packet.data;

            lat = pos.lat / 1e7;
            lng = pos.lon / 1e7;
            alt = pos.alt / 1e3;
            hdg = (ushort)(pos.cog / 1e2);

            //StateHasChanged();

            //await Task.Delay(1);

            //Console.WriteLine("Update mavlink_gps_raw_int_t ##############################");
        }
        else if (packet.data is MAVLink.mavlink_heartbeat_t)
        {
            var hb = (MAVLink.mavlink_heartbeat_t)packet.data;

            if (DateTime.Now > nextUpdate)
            {
                int a = 0;
                foreach (var mavd in mav.MAVlist)
                {
                    mavd.cs.UpdateCurrentSettings(null, false, mav, mavd);
                    JSRuntime.Current.InvokeAsync<object>("setPosition", new object[] {a, mavd.cs.lat, mavd.cs.lng});
                    a++;
                }

                gpstime = DateTime.Now;

                StateHasChanged();

                nextUpdate = DateTime.Now.AddMilliseconds(100);
            }

            //mav.DebugPacket(packet, true);
        }
        else if (packet.data is MAVLink.mavlink_param_value_t)
        {
            var param = (MAVLink.mavlink_param_value_t)packet.data;

            Console.WriteLine("{0} {1}", ASCIIEncoding.ASCII.GetString(param.param_id), param.param_value);
        }

        return true;
        //mav.DebugPacket(packet, true);
    }

    public void Dispose()
    {
        Http?.Dispose();

        mav?.Dispose();
    }

}